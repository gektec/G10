var relearn_searchindex = [
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources",
    "content": "Ensuring that meetings are scheduled efficiently is a crucial aspect of successful stakeholder engagement. This becomes especially important when stakeholders have demanding schedules. Striking a balance between minimizing disruptions and securing a suitable time slot is key. Our team encountered several challenges in scheduling meetings with stakeholders, leading to delays and inefficiencies. By sharing our experiences, we hope to provide a structured guide for scheduling meetings effectively.\nRecommended Tool for Scheduling: Doodle Our stakeholders initially suggested using Doodle as a scheduling tool. After using it, we found it to be highly effective in streamlining the scheduling process. Doodle allows users to create a form with multiple time slots, which can be shared with stakeholders via a link. Stakeholders can then easily select their available time slots, simplifying the coordination process.\nFigure 1: Layout of the Doodle Form Lessons Learned in Scheduling Meetings 1. Avoid Delays in Sending Doodle Links Due to internal decision-making delays and occasional procrastination, we took too long to initiate the scheduling process. The back-and-forth communication took approximately two weeks, resulting in a situation where one of the stakeholders was unable to attend the meeting and had to send a representative instead. To prevent such issues, we highly recommend initiating scheduling discussions during meetings or at least one week in advance. Early scheduling significantly reduces potential conflicts and disruptions.\n2. Providing an Insufficient Number of Time Slots Initially, we provided only five available slots in a week, which proved inadequate as none aligned with the stakeholders’ schedules. To address this, we expanded the selection to 20 time slots. However, this led to confusion as stakeholders were unsure why a second Doodle link was sent, requiring them to fill out a new form. Furthermore, when no common slot was found, another scheduling attempt had to be made for the following week, resulting in excessive email exchanges and frustration.\nFigure 2: Example of Doodle Time Slots Results 3. Alternative Solutions to Scheduling Conflicts Since securing a time that accommodated all stakeholders proved challenging, we explored alternative solutions:\nRotating Stakeholders for Each Meeting: Instead of biweekly meetings with all stakeholders, we held weekly meetings with one stakeholder at a time, alternating between them. This ensured that both stakeholders remained informed and had opportunities to provide input. However, one stakeholder expressed concerns about the increased frequency, stating that they might not have significant contributions in every session due to their specific role in the project.\nProceeding with Meetings Despite an Absent Stakeholder: Our chosen solution involved conducting meetings even if a stakeholder was unavailable. A representative was assigned to attend on their behalf, take meeting minutes, and capture relevant visuals of our progress. This ensured that absent stakeholders could still stay informed through documented records.\nEstablishing a Fixed Meeting Schedule: Initially, meetings were scheduled on an ad-hoc basis, only when the team was ready for stakeholder discussions. This proved highly inefficient, as securing stakeholder availability required at least a week’s notice, causing project delays. Transitioning to a biweekly fixed meeting schedule eliminated the need for constant rescheduling, as all participants were aware of the designated time in advance.\nConclusion Effective meeting scheduling requires early planning, clear communication, and adaptability. By using tools like Doodle, minimizing scheduling delays, and establishing a consistent meeting cadence, teams can avoid unnecessary disruptions and maintain smooth collaboration with stakeholders.",
    "description": "Ensuring that meetings are scheduled efficiently is a crucial aspect of successful stakeholder engagement. This becomes especially important when stakeholders have demanding schedules. Striking a balance between minimizing disruptions and securing a suitable time slot is key. Our team encountered several challenges in scheduling meetings with stakeholders, leading to delays and inefficiencies. By sharing our experiences, we hope to provide a structured guide for scheduling meetings effectively.\nRecommended Tool for Scheduling: Doodle Our stakeholders initially suggested using Doodle as a scheduling tool. After using it, we found it to be highly effective in streamlining the scheduling process. Doodle allows users to create a form with multiple time slots, which can be shared with stakeholders via a link. Stakeholders can then easily select their available time slots, simplifying the coordination process.",
    "tags": [],
    "title": "Chapter 10: Scheduling Meetings Effectively",
    "uri": "/10.scheduling/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources",
    "content": "Stakeholders meetings are crucial in ensuring a successful project, as it ensures alighnment among team members and the stakeholders. These meetings allows the team to have a proper understanding of the entire project. However, organizing and running effective stakeholder meetings requires careful planning and clear roles in order. The last thing a team wants is to leave an unprofessional impression, as this could damage trust and discourage stakeholders from continuing the collaboration.\nKey Steps for Successful Stakeholder Meetings 1. Structured Agenda A well-prepared agenda is essential for keeping meetings focused and productive. It should outline key discussion points to be made. Based on our experience, using point forms is often sufficient, but it’s also helpful to include additional notes or sub-points for important details. This ensures that critical topics are not overlooked and provides a reference in case any points are forgotten during the discussion.\n2. Clear Roles and Responsibilities Assigning specific roles for each meeting helps streamline discussions and ensures accountability. In our project, we adopted the following roles:\nChair: Guides the meeting, keeps discussions on track, and ensures the agenda is followed. The chair is the main person driving the conversation and presenting updates. Tech Lead: Provides technical insights, supports the chair during discussions, and highlights any missed points or technical considerations. Secretary: Documents meeting minutes, record whatever important points that were discussed in the meeting. 3. Adaptive Communication and Smart Engagement Effective communication is key to stakeholder meetings. Instead of rigidly sticking to the agenda, it is crucial to follow the natural flow of the conversation. If certain points have already been addressed on an earlier conversation, repeating them unnecessarily can frustrate stakeholders. Likewise, asking the same questions multiple times can make the team appear unprepared and disorganized.\nTo improve communication, we recommend:\nReading the room: Pay attention to stakeholders’ engagement levels and adapt accordingly.\nAvoiding excessive repetition: Be mindful of what has already been discussed and prevent redundancy.\n4. Meeting Minutes Recording meeting minutes is a crucial part of successful stakeholder engagement. A well-documented record of discussions ensures that key points are not forgotten and provides a clear reference for future actions. Meeting minutes also help team members who were unable to attend stay informed about what was discussed.\nAdditionally, keeping detailed records prevents minor details from being overlooked and serves as a checklist for tracking progress. By reviewing the minutes, the team can ensure that all discussed points have been addressed and necessary follow-ups are completed.\nIn our meetings, minutes are recorded in point form for clarity and efficiency. To enhance understanding, we include brackets to provide additional explanations or justifications for each recorded point. This approach helps ensure that every note remains meaningful and actionable. 5. Action Items and Follow-Ups At the end of each stakeholder meeting, we hold an internal team discussion to brief the other group members on what was discussed and outline the actions to be taken moving forward. This ensures everyone is informed and aligned with the next steps.\nLessons Learned: The Value of Consistency While our approach had many strengths, we identified an area for improvement: rotating roles during stakeholder meetings. Although the chair remained consistent throughout the project, the tech lead and secretary roles were rotated weekly to give everyone an opportunity to experience these responsibilities. While this was well-intentioned and allowed team members to develop new skills, it led to some lighthearted comments from stakeholders about the number of group members they interacted with. Although this was not a major issue, we realized that having fixed roles for the tech lead and secretary would likely improve efficiency and make it easier for stakeholders to build rapport and trust with the team. Moving forward, we believe consistency in roles will enhance the overall effectiveness of our meetings.\nWhat We Learned: Consistency Builds Trust: Keeping the same people in key roles (e.g., tech lead and secretary) ensures that stakeholders have a consistent point of contact, fostering stronger relationships over time. Role Familiarity Enhances Performance: When individuals perform the same role repeatedly, they become more skilled and efficient, leading to smoother meetings and better outcomes. Balance Learning and Stakeholder Needs: While it’s important to provide team members with growth opportunities, this should be balanced with the need for stakeholder confidence and meeting effectiveness. Best Practices for Future Projects Based on our experience, here are some recommendations for organizing stakeholder meetings:\nAssign Fixed Roles: Identify a consistent chair, tech lead, and secretary for the duration of the project. This ensures continuity and builds stakeholder confidence. Rotate Roles Strategically: If team members need exposure to different roles, consider rotating responsibilities during internal team meetings rather than stakeholder meetings. Prepare Agendas: Clearly communicate the purpose, structure, and roles of the meeting to stakeholders in advance to set expectations. Document and Share Minutes: Ensure meeting minutes and action items are shared promptly after each meeting to keep everyone informed and aligned.",
    "description": "Stakeholders meetings are crucial in ensuring a successful project, as it ensures alighnment among team members and the stakeholders. These meetings allows the team to have a proper understanding of the entire project. However, organizing and running effective stakeholder meetings requires careful planning and clear roles in order. The last thing a team wants is to leave an unprofessional impression, as this could damage trust and discourage stakeholders from continuing the collaboration.",
    "tags": [],
    "title": "Chapter 9: Effective Stakeholder Meetings: Lessons from a Collaborative Project",
    "uri": "/9.meeting/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources",
    "content": "Introduction This user manual consists of two parts:\nUser Manual for the Virtual Environment Asset – Instructions on opening and interacting with the virtual environment created by our team. User Manual for the Open Educational Resource (OER) – Guide on accessing the educational content provided. User Manual for Virtual Environment Asset 1. Introduction Welcome to the Virtual Environment Asset for Unreal Engine 5.3.3. This asset provides a high-quality, immersive environment for virtual production. It includes two distinct areas:\nHospital Room (interactive elements available) Monitor Room This manual will guide you through installation, navigation, material customization, and interaction.\n2. Installation \u0026 Setup Step 1: Install Unreal Engine 5.3.3 Download and install Epic Games Launcher from Epic Games. Open the launcher and navigate to Unreal Engine. Click Install and select version 5.3.2. Launch Unreal Engine 5.3.2. Step 2: Open the Virtual Environment Locate the provided file (UE.zip).\nExtract the file. Locate and double-click the file with Unreal Engine icon – Unreal Engine will launch and load the environment.\n4. Press the green triangle button on top of the bar to run the environment.\n3. Navigating the Scene Use the following controls to move around:\nW, A, S, D – Move forward, left, backward, right Mouse Movement – Look around Right Mouse Button (Hold) – Enable freelook mode Spacebar – Move up Left Ctrl – Move down Shift (Hold) – Increase movement speed 4. Interaction: Light Toggle (Hospital Room Only) Press F to toggle the lights in the hospital room. The action works only in the hospital room; other areas do not have interactive elements. Asset before Asset after 5. Editing the asset Step 1: Select the asset you want to edit Left-click on the asset you want to edit. Once selected, the asset will be highlighted as shown below. Step 2: Changing material Locate the Material section in the Details Panel on the bottom right of the screen.\nClick on the dropdown menu to select a different material.\nStep 3: Changing Location After selecting the asset, a three-axis gizmo will appear.\nDragging the arrows moves the asset along different axes:\nRed (X-Axis) – Moves the object along the X-axis (Left / Right) Green (Y-Axis) – Moves the object along the Y-axis (Forward / Backward) Blue (Z-Axis) – Moves the object along the Z-axis (Up / Down) 6. License \u0026 Usage This virtual asset is provided for personal and commercial use within virtual production projects. Redistribution or resale is prohibited. Ensure compliance with Unreal Engine’s content usage policies.\nFor further assistance, contact the support team or visit Unreal Engine’s documentation.\nEnjoy your virtual production experience!\nUser Manual for Open Educational Resource (OER) 1. Introduction The Open Educational Resource (OER) is an online learning resource designed to provide educational content related to virtual production. It is accessible via a simple web link.\n2. Accessing the OER Step 1: Open the Link Click on the provided OER link or copy and paste it into your browser’s address bar. Press Enter to load the webpage. Step 2: Explore the Content Navigate through the modules or sections provided. Follow the learning materials at your own pace. Step 3: Interact with the Resource Some OERs may include quizzes, videos, or interactive elements. Ensure you have a stable internet connection for a smooth experience. 3. License \u0026 Usage The OER is available for educational use. Redistribution or modification may be subject to specific licensing terms provided by the content creator.",
    "description": "Introduction This user manual consists of two parts:\nUser Manual for the Virtual Environment Asset – Instructions on opening and interacting with the virtual environment created by our team. User Manual for the Open Educational Resource (OER) – Guide on accessing the educational content provided. User Manual for Virtual Environment Asset 1. Introduction Welcome to the Virtual Environment Asset for Unreal Engine 5.3.3. This asset provides a high-quality, immersive environment for virtual production. It includes two distinct areas:",
    "tags": [],
    "title": "G10 Virtual Production User Manual",
    "uri": "/user_manual/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources \u003e  Unreal_engines",
    "content": "5.1 Importance and Requirements of Teamwork in Unreal Engine Teamwork is very important in the development of Unreal Engine. A good Unreal Engine production team usually has: a project manager with good communication skills, an innovative set designer, a good 3D modeler, a technical artist who knows the UE material editor, an engineer who knows how to operate Unreal Engine, and a conscientious tester. Only the cooperation of the team will prevent the project from stalling for any reason.\nDividing Teamwork in an Unreal Engine Project In an Unreal Engine project for virtual production, there are different tasks to handle; therefore, it is not necessary for every team member to build virtual environments in Unreal Engine. In our project, our team initially needs to build two virtual environments, so tasks are divided into finding suitable models or assets, modifying or customizing the assets in Unreal Engine or Blender, and constructing the virtual environments using the assets.\n5.2 Version Control Solutions This section provides an introduction to version control solutions and version control systems (VCS), explaining the characteristics of Unreal Engine projects.\nIntroduction A Version Control Solution in this context refers to an integrated solution for version control and synchronization of Unreal Engine projects. It can be separated into two components: the version control system and a server with storage to host central or remote repositories where your Unreal Engine projects are stored. A version control system is a software system that provides synchronization and version control of project files.\nCharacteristics of Unreal Engine Projects Large file sizes\nAn Unreal Engine project often contains many large files, such as 3D models and high-resolution textures. The initial size of a project may not require much storage, but as the project grows, it will need more space measured in gigabytes.\nDiverse file types\nAn Unreal Engine project typically contains different types of files, many of which are binary files.\nHow these Characteristics Affect the Choice of Version Control System It is possible that a version control system may not manage large files and binaries effectively. For example, Git itself does not handle large binaries well, but the Git extension Git LFS (Large File Storage) addresses this issue.\nVersion Control Systems Categories of Version Control Systems There are mainly three types of version control systems:\nCentralized Version Control Systems\nCentralized systems, such as Perforce Helix Core, use a single server to store all versions of project files and corresponding changes. This central server stores every version of project files as the main repository. Distributed Version Control Systems\nDistributed systems, like Git, save the project files in a main repository. Each collaborator has a local version on their own computer checked out from the remote repository, allowing them to modify files offline before committing changes and pushing them back to the remote server. Local Version Control Systems\nLocal systems are primarily for solo developers rather than virtual production teams. Possible Version Control Systems for Unreal Engine Projects This section references Unreal Engine documentation (link), which introduces methods that enable version control with Unreal Engine. Three version control systems are discussed:\nPerforce Subversion (SVN) Diversion Among these, Perforce and Subversion are fully integrated with Unreal Engine, supported by built-in source control features. Diversion provides plug-ins or tools for integration with Unreal Engine. For more details, please refer to the provided link.\nP4 (Helix Core or Perforce) P4 (link) is a version control platform used in the industry for game development. It is a centralized version control system, known as “Helix Core” or “Perforce.” It is utilized internally by Epic Games and stakeholders in our project. While it is commercial software, it allows free use for small teams of up to 5 users without providing hosting services.\nSubversion Subversion (link) is an open-source centralized version control system under the Apache License, Version 2.0 (link).\nDiversion Diversion (link) is a cloud-based version control system.\nGit with Git LFS Git (link) is a distributed version control system, open source under the GNU General Public License version 2.0 (link). Git LFS (link) is an open-source Git extension that helps manage binary files and large files.\nVersion Control Service This section analyzes the pricing of version control systems discussed previously to find a suitable option for a student group. The pricing information may change in the future; please always visit the respective website links provided.\nPaid Version Control Service Perforce\nPerforce does not provide hosting services for users on the free plan. If you are on the free plan, you will need to find a cloud service or host the service yourself. Subversion\nSince Subversion is open source, you will also need to host the service yourself or find a cloud service. Free Version Control Service for Small Teams or Educational Purposes Diversion for Educational Use\nDiversion is commercial software but offers free use for educational users, allowing up to 100 GB and up to 10 users in a repository. A user is categorized in the Educational tier upon registration, verified at the time of writing this documentation. This is beneficial for a student group or small team wanting to try virtual production at no cost. Git with Git LFS\nSimilarly to Subversion, you will need to find a cloud hosting service or platform that supports Git and Git LFS. Both GitHub and GitLab are cloud-based platforms typically used for hosting code repositories. With Git LFS, every GitHub account on the free tier has 1 GiB of free storage and 1 GiB of free bandwidth monthly, and every GitLab project has 10 GiB for free. However, Git can be difficult for students and creators without prior experience, making it potentially unsuitable in Virtual Production. References GitLab Version Control Unity Version Control Centralized Version Control Systems What is Version Control? Perforce Products: Helix Core Unreal Engine Collaboration and Version Control Unreal Engine Source Control Subversion GNU General Public License v2.0 Git LFS Helix Core Pricing Diversion Pricing Managing Large Files on GitHub GitLab Storage Usage Quotas",
    "description": "5.1 Importance and Requirements of Teamwork in Unreal Engine Teamwork is very important in the development of Unreal Engine. A good Unreal Engine production team usually has: a project manager with good communication skills, an innovative set designer, a good 3D modeler, a technical artist who knows the UE material editor, an engineer who knows how to operate Unreal Engine, and a conscientious tester. Only the cooperation of the team will prevent the project from stalling for any reason.",
    "tags": [],
    "title": "Chapter 5: Techniques for Teamwork in Unreal Engine",
    "uri": "/unreal_engine/5.techniques_for_teamwork_in_unreal_engine/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources",
    "content": "After we won the bid for this project, we had a period of hiatus prior to formal contact with stakeholders. Because the stakeholders are busy, it is difficult to make appointments with them. So we had almost three weeks to prepare for formal contact. In the first week, we didn’t pay much attention to it, and that was our mistake. But after a meeting with our professor, Dave, we immediately realized the importance of meeting with stakeholders and started focusing on it right away.\nFirst, we looked over the brief description of the project. This project is mainly about virtual production and motion capture. The school and ARRI worked together to build a virtual production studio to shoot the film. The brief for the project was very general, with no details about what we were going to do to help the stakeholders. Moreover, as far as we know, the studio had not been completed yet when we participated in the project. We could only keep guessing what we were going to do. Regardless, we took a closer look at the specifics of virtual production. Each member of our group read at least two papers in this direction. Not only that, but we also checked out ARRI and their studios in other parts of the world to get a better understanding.\nKeeping stakeholders happy is very important during the project process, so we wanted to get to know a few of the stakeholders at the meeting better. We checked their profiles and LinkedIn on the school’s official website. There is one example after we did some research:\nAfter doing some basic research, we actually did more research on specific devices and how to connect them because we didn’t know exactly what to do yet. We then prepared an outline of the meeting to ensure we were in the right place when it came time for the formal meeting.\nHere is an example of one of our meeting plans:",
    "description": "After we won the bid for this project, we had a period of hiatus prior to formal contact with stakeholders. Because the stakeholders are busy, it is difficult to make appointments with them. So we had almost three weeks to prepare for formal contact. In the first week, we didn’t pay much attention to it, and that was our mistake. But after a meeting with our professor, Dave, we immediately realized the importance of meeting with stakeholders and started focusing on it right away.",
    "tags": [],
    "title": "Chapter 8: Preparation for Meeting with Stakeholders",
    "uri": "/8.preparation_for_meeting-with_stakeholders/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Unreal_engines",
    "uri": "/unreal_engine/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources \u003e  Unreal_engines",
    "content": "2.1 Unreal Editor Interface This section explains what the important elements of the Unreal Engine 5.3 interface do. Since the user interface may change when the sub-version of Unreal Engine 5.3 is updated, you may find your interface is slightly different from the one in this section or official documentation. You may also refer to more detailed illustrations on the Unreal Engine website: Unreal Editor Interface.\nMenu Bar The menu bar contains menus where you can find commonly used commands. Main Toolbar The main toolbar contains shortcuts to common tools and editors in Unreal Engine. Level Viewport This displays the virtual world you edit and specifically the contents of the current level. Content Drawer and Content Browser By clicking the Content Drawer button located at the bottom left corner, you can open an instance of Content Browser. The Content Browser is a file explorer window where you can select and add assets to the stage or project. Bottom Toolbar The bottom toolbar shows shortcuts to Output Log, Command Console, Derived Data, and Source Control Status.\nOutliner Panel This panel is located in the upper-right corner by default, which displays a hierarchical view of all the elements or objects in the current level.\nDetails Panel The Details Panel allows you to view and edit the properties of an object selected in the Level Viewport.\n2.2 Tools and Editors This section serves as an introduction to editors and tools that we have used in Unreal Engine based on Unreal Engine documentation. More details can be found at Tools and Editors in Unreal Engine.\n2.2.1 Level Editor The Level Editor serves as the primary editor for designing and assembling your virtual production environments. When you create or open a project using Unreal Engine, it is opened by default.\n2.2.2 Material Editor The Material Editor is a tool for creating and editing materials that can be applied to properties of objects in a Level.\n2.3 Unreal Engine Terminology This section explains some important terms using Unreal Engine documentation as a reference. For more terms, visit the link Unreal Engine Terminology.\nProject: A Project includes all the contents of your virtual scene, such as the assets that make up your virtual scene. You can view the project structure in the directory where you choose to save your project or using the Content Browser panel.\nActor: An Actor is any object that you can place into the level and interact with it in the virtual scene.\nLevel: A Level is a container where you can include everything in a virtual scene and organize your scene, for example, objects like a bed in a hospital room.\nWorld: A World is the runtime environment that you load Levels into. It maintains global settings across all the Levels and manages the streaming of Levels. For example, if you have different virtual scenes in the same Unreal Engine project as different levels, you can unload or load different scenes to make a transition in virtual production.\nnDisplay (plugin): The nDisplay plugin ensures the virtual scenes are displayed correctly and synchronizes multiple displays or projectors to create immersive environments.\n2.4 Licenses Guide for an Unreal Engine Project 2.4.1 Licenses of Project If you would like to share your project experiences or results online, you may be interested in Creative Commons Licenses: Creative Commons. Creative Commons Licenses (CC Licenses) offer creators a standardized method for creators to legally share their work with the public. There are six license types for the CC Licenses. Among all the options, CC BY license is the fundamental license, which only requires reusers to give attribution to the creator when distributing, remixing, adapting, or building upon the original material in any medium or format. This also means it allows for commercial use.\nCC BY-SA: The license CC BY-SA requires reusers to share their adaptations under the same license. CC BY-NC: The license CC BY-NC limits uses of the original work to noncommercial purposes only. CC BY-ND: The license CC BY-ND prohibits any derivatives or adaptations of the original work. In addition to the four licenses explained, the remaining two licenses, CC BY-NC-SA and CC BY-NC-ND, are based on the license CC BY-NC, so they are more restrictive than CC BY-NC.\nCC BY-NC-SA: Similar to CC BY-SA, this license also requires reusers to share the original work under the same terms in addition to restrictions in CC BY-NC. CC BY-NC-ND: Similar to CC BY-ND, this license also prohibits any derivatives or adaptations of the original work in addition to restrictions in CC BY-NC. If the work is shared as open educational resources, it is recommended to avoid the licenses CC BY-ND and CC BY-NC-ND because they violate two core OER principles, “redistribute” and “remix”, by limiting the right to distribute and not allowing users to redistribute modified or remixed work. The most popular CC licenses are CC BY and CC BY-SA.\n2.4.2 Licenses of Assets in Unreal Engine Marketplace The licenses of assets are different depending on their sources. This section introduces the licenses of assets in Fab, the Unreal Engine marketplace. Currently, Fab offers two license types, Creative Commons Attribution (CC-BY) and Standard (Free or For Sale).\nThe Standard license has two tiers, the Personal tier and the Professional tier, based on total revenue from commercial activity in the last 12 months. The Standard license can also be categorized into Standard License under a Personal - Reference Only tier and Standard License under a Personal or Professional tier. To decide on the assets under which license to use, consider the purposes of your project and how you will use those assets.\nTo find more details about Licenses in Fab, visit Licenses and Pricing in Fab and Fab EULA.\n2.5 Project Directory Structure This section will only discuss project structure. If you are also interested in the Engine directory, please refer to Unreal Engine Directory Structure. This section uses an example from the Unreal Engine website as a reference to explain how to adjust your project structure more standardized.\n2.5.1 Content Browser Folders Setup your project folder: Open the Content Browser by clicking the Content Drawer button located at the bottom left corner, and create a new folder inside the Content folder using the + Add in the top left corner. Name this folder based on your project name. Create some folders such as Assets, Envs, Stages, and StageLevels. For best practices, visit the link Recommended Asset Naming Conventions in Unreal Engine Projects.\nTo get more details of each folder, visit their individual pages below:\nAssets Envs Media Sequences Stages StageLevels Tools Reference List for Chapter 2 Section 2.1 [1] Unreal Editor Interface\nSection 2.2 [2] Tools and Editors in Unreal Engine\nSection 2.3 [3] Unreal Engine Terminology\nSection 2.4 [4] Creative Commons [5] Usage Rights [6] OER Starter Kit [7] OER Capability Toolkit [8] Fab Licenses and Pricing\nSection 2.5 [9] Unreal Engine Directory Structure",
    "description": "2.1 Unreal Editor Interface This section explains what the important elements of the Unreal Engine 5.3 interface do. Since the user interface may change when the sub-version of Unreal Engine 5.3 is updated, you may find your interface is slightly different from the one in this section or official documentation. You may also refer to more detailed illustrations on the Unreal Engine website: Unreal Editor Interface.\nMenu Bar The menu bar contains menus where you can find commonly used commands.",
    "tags": [],
    "title": "Chapter 2: Unreal Engine Basic Knowledge",
    "uri": "/unreal_engine/2.unreal_engine_basic_knowledge/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources \u003e  Unreal_engines",
    "content": "4.1 Workflows of Developing Your Virtual Scenes First, to make a virtual scene, we need to determine the basic style of the scene, because style determines the choice of material texture when making a scene.\nIn the second step, the ideal shooting angle and object distribution of the scene are determined. When constructing a virtual scene, the wrong object distribution often makes the visual effect of the scene greatly reduced. At the same time, a clear example of the scene diagram will make the virtual scene production more convenient and fast.\nThe third step is to build the basic framework of the virtual scene. When making a virtual scene, not all the materials or materials need to be made by ourselves or found on the Internet. A maker can start by constructing an abstract virtual scene using basic shapes and models (such as cylinders for people, cuboids for walls or tables). The advantage of this is that it allows the producer to quickly build a mental picture of the actual scene that needs to be made, and at the same time, it is convenient for the stakeholders to correct the position of some objects.\nThe fourth step is to find or create the assets. In most cases, the assets you can find on sites like Fab are good enough, but not enough to fully meet the needs of the scene. Therefore, what we need is to improve the material through secondary modeling modification on the basis of the original material, which requires the producer to have the ability to use modeling software, such as Blender. At the same time, the UE 5 version has added modeling mode, and some versions may need to download built-in plug-ins to use.\nThe fifth step is to put in those materials and set the material (or decal) to make it achieve the initial visual effect. Up until this point, we can ignore the material effect. It’s better if the source material has the right material, and if it doesn’t, that’s fine. Because in this step, we will make and distribute the material uniformly.\nThe last step, the sixth, is to check how the scene looks on a real LED screen. We may need to fine-tune the position and size of the objects. It’s also important to pay attention to the source file path and configuration compatibility in different UE versions.\n4.2 Tutorial of Developing a Virtual Environment This is followed by an example step of placing a wall:\n4.2.1 Creating a Wall Model Using Modeling Software Open Modeling Software: Launch your preferred 3D modeling tool (e.g., Blender, 3ds Max, etc.) Create Basic Geometry: Select the Cube tool and create a rectangular prism. Adjust the dimensions to match the wall’s real-world size (e.g., height 300cm, thickness 20cm, length as needed). Refine the Model: If door or window openings are needed, use Boolean operations to cut the wall. Ensure the model’s topology is clean and avoid excessive polygons. UV Unwrapping: Create UV maps for the wall model to ensure proper material application in UE5. Export the Model: Export the model in FBX format (ensure “Smoothing Groups” and “Embed Textures” are checked). 4.2.2 Importing the Wall Model into UE5 Open UE5 Project: Launch Unreal Engine 5 and open your project or create a new one. Import the Model: Right-click in the Content Browser and select “Import to /Game.” Choose the exported FBX file and click “Open.” Set Import Options: In the import window, ensure “Import Materials” and “Import Textures” are checked. Adjust other settings as needed (e.g., scale, rotation). Click “Import” to complete the process. 4.2.3 Placing the Wall Model Drag into the Scene: Locate the imported wall model in the Content Browser and drag it into the scene. Adjust Position and Rotation: Use the Move tool (shortcut: W) to position the wall. Use the Rotate tool (shortcut: E) to adjust the wall’s orientation. Use the Scale tool (shortcut: R) to resize the wall if necessary. Align to the Ground: Select the wall and press the End key to align it to the ground. If the End key doesn’t work, manually adjust the Z-axis position or use snapping (hold V and drag vertices to align). Duplicate and Arrange: Hold Alt and drag the wall to quickly duplicate and arrange multiple walls. Use grid snapping (shortcut: Ctrl) to ensure proper alignment between walls. 4.2.4 Adding Materials Create a Material: Right-click in the Content Browser and select “Material” to create a new material. Name the material (e.g., “Wall_Material”). Edit the Material: Double-click to open the Material Editor. Add a Texture Sample node and import wall textures (e.g., diffuse, normal, roughness). Connect the texture nodes to the material’s Base Color, Normal, and Roughness inputs. Adjust material parameters (e.g., color, glossiness). Apply the Material: Drag the material from the Content Browser onto the wall model in the scene. If different parts of the wall need different materials, assign Material IDs in the modeling software and create material instances in UE5. 4.2.5 Lighting and Optimization Add Lighting:\nPlace light sources in the scene (e.g., Directional Light, Point Light). Adjust the light’s intensity and color to ensure the wall material displays correctly. Optimize Performance:\nSet up LOD (Level of Detail) for the wall model to reduce polygon count at a distance. Use Occlusion Culling to optimize rendering performance (Enabled by default in UE5). 4.2.6 Testing and Adjusting Run the Scene: Click the “Play” button in the toolbar to test the scene. Check the wall’s position, material, and lighting effects. Adjust Details: Based on the test results, adjust the wall’s position, rotation, or scale. Modify material parameters or replace textures to improve visual quality. 4.2.7 Saving the Project Save the Scene: Click the “Save” button in the toolbar to save the current scene. Backup the Project: Regularly back up project files to avoid data loss. 4.3 Additional Tips Using BSP Tools for Quick Wall Creation: In UE5, you can use BSP (Binary Space Partitioning) tools to quickly create simple walls. In the Modes panel, select “BSP,” drag out a box, adjust its size, and convert it to a static mesh.\nUsing Quixel Bridge for High-Quality Materials: Import free Megascans materials via Quixel Bridge to quickly enhance the wall’s visual quality.",
    "description": "4.1 Workflows of Developing Your Virtual Scenes First, to make a virtual scene, we need to determine the basic style of the scene, because style determines the choice of material texture when making a scene.\nIn the second step, the ideal shooting angle and object distribution of the scene are determined. When constructing a virtual scene, the wrong object distribution often makes the visual effect of the scene greatly reduced. At the same time, a clear example of the scene diagram will make the virtual scene production more convenient and fast.",
    "tags": [],
    "title": "Chapter 4: Virtual Environment Development",
    "uri": "/unreal_engine/4.virtual_environment_development/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources \u003e  Unreal_engines",
    "content": "1.1 Installation 1.1.1 Installation on Windows or macOS Download the installer for Epic Games Launcher from the Unreal Engine’s official website: Download Unreal Engine. Install Epic Games Launcher by running the installer. If you fail to install the launcher, you may try other reliable sources, such as Microsoft Store on Windows to install the launcher. After running the Launcher, sign up for an Epic Games account if you don’t have one (an account is required to use Unreal Engine). Sign in to the Epic Games Launcher. Install Unreal Engine inside the Epic Games Launcher. 1.1.2 Installation on Linux The Epic Games Launcher is not available on Linux, but precompiled builds or source code builds of Unreal Engine can be used. To build Unreal Engine from Source, you may refer to this link: Downloading Unreal Engine Source Code. To use a precompiled build, follow the procedures below: Open the Unreal Engine for Linux webpage: Unreal Engine for Linux. You will be prompted to create or sign into an Epic Games account, which is required to use Unreal Engine later. Sign in to access the page if you already have an account, otherwise click “Sign up” to create one with an email or with a listed social media or gaming platform account. Download the .zip file containing a version of Unreal Engine 5.3 or other version you need. Note that Unreal Engine 5.3 will be used in this guide. Unzip the contents of the .zip file to your desired installation directory. Run Engine/Binaries/Linux/UnrealEditor from the Terminal to launch the Unreal Engine. 1.1.3 Changing the Installation Location or Registering an Installation using the Epic Games Launcher You have a chance to select the installation location for Unreal Engine when you install it with the Launcher. But if you want to move an existing installation to a new location or if a previous installation is not recognized, follow these steps:\nOpen the Epic Games Launcher, then click the Unreal Engine tab on the left sidebar, and click the Library tab on the top menu. After that, the first row on the page shows Unreal Engine versions with slots if installations exist. Click the (+) button beside the text ENGINE VERSIONS, and then a dark slot should appear. Select the version you need to move or register by clicking the version number on that slot. Click the Browse button to choose an empty folder or create a new folder where you need to move or register the installation. Optionally, modify the default engine components to install with Unreal Engine by clicking the Options button. Click the Install button. When the text “Installing” appears on the version tile, click the (X) button to stop the installation. After that, a Resume button should appear on the tile after the cancellation of the installation. Open the file explorer on your computer, such as Windows Explorer on Windows platform. Then, move the installation folder from the original location into the install location you’ve selected in step 2. Open the Launcher window and then click the Resume button to resume the installation. After completing the steps above, it may take some time for the Launcher to verify the installation. After that, you can launch the Unreal Engine.\n1.2 Hardware and Software Specifications of Unreal Engine 5.3 1.2.1 Recommended Hardware Processor: Apple Silicon M3, or Quad-core Intel or AMD (2.5 GHz or faster) Memory: 16 GB or more Video RAM: 8 GB or more 1.2.2 Minimum Software Requirements for Running Unreal Engine 5.3 Windows: Operating System: Windows 10 DirectX Runtime: DirectX End-User Runtimes (June 2010) Download DirectX macOS: Recommended Operating System: Latest MacOS 13 Ventura Minimum Operating System: macOS 12.5 Monterey Linux: Operating System: Any reasonable new Linux distro from CentOS 7.x and up Linux Kernel Version: kernel 3.x or newer Additional Dependencies: glibc 2.17 or newer (2.35 or newer is better)",
    "description": "1.1 Installation 1.1.1 Installation on Windows or macOS Download the installer for Epic Games Launcher from the Unreal Engine’s official website: Download Unreal Engine. Install Epic Games Launcher by running the installer. If you fail to install the launcher, you may try other reliable sources, such as Microsoft Store on Windows to install the launcher. After running the Launcher, sign up for an Epic Games account if you don’t have one (an account is required to use Unreal Engine). Sign in to the Epic Games Launcher. Install Unreal Engine inside the Epic Games Launcher. 1.1.2 Installation on Linux The Epic Games Launcher is not available on Linux, but precompiled builds or source code builds of Unreal Engine can be used. To build Unreal Engine from Source, you may refer to this link: Downloading Unreal Engine Source Code. To use a precompiled build, follow the procedures below: Open the Unreal Engine for Linux webpage: Unreal Engine for Linux. You will be prompted to create or sign into an Epic Games account, which is required to use Unreal Engine later. Sign in to access the page if you already have an account, otherwise click “Sign up” to create one with an email or with a listed social media or gaming platform account. Download the .zip file containing a version of Unreal Engine 5.3 or other version you need. Note that Unreal Engine 5.3 will be used in this guide. Unzip the contents of the .zip file to your desired installation directory. Run Engine/Binaries/Linux/UnrealEditor from the Terminal to launch the Unreal Engine. 1.1.3 Changing the Installation Location or Registering an Installation using the Epic Games Launcher You have a chance to select the installation location for Unreal Engine when you install it with the Launcher. But if you want to move an existing installation to a new location or if a previous installation is not recognized, follow these steps:",
    "tags": [],
    "title": "Chapter 1: Unreal Engine Setup",
    "uri": "/unreal_engine/1.unreal_engine_setup/index.html"
  },
  {
    "breadcrumb": "",
    "content": "In the forefront of today’s film and television Production, Virtual Production is gradually becoming a key force to promote industry change. Virtual production is an innovative film and television production technology, which deeply integrates traditional film and television shooting with advanced digital technology. Through real-time rendering, motion capture and other technical means, realistic scenes, characters and special effects are created in the virtual environment, and can be presented in real time on the shooting scene, so that creators can adjust and optimize the shooting content in real time. Greatly improve the flexibility and efficiency of creation.\nOur projects focus on virtual production and motion capture filmmaking. After many in-depth meetings with stakeholders, we decided on a project direction to use the game engine to create two virtual scenes for them, specifically for the film. These virtual scenes will give full play to the advantages of virtual production, providing a highly flexible and realistic virtual environment for film shooting.\nIn our project, we will mainly use the game engine of Unreal 5.3 version. In the following OER chapters, we will teach you how to install and use Unreal Engine first. To develop a Virtual Environment, the most important thing is to put virtual assets into the game engine. Of course, the users can create the virtual assets by themselves, using some modeling software. In our project, we used blender, but users can choose any modeling software as you like. Also, you can just find some 3d modeling on the internet as your virtual assets. But beware of copyright issues. You can refer to chapter 2.4.1 of the OER for more knowledge of the licenses. Moreover, we also used some plugins to help us. For example, Fab, Twinmotion, and Datasmith. We will talk more about them later.",
    "description": "In the forefront of today’s film and television Production, Virtual Production is gradually becoming a key force to promote industry change. Virtual production is an innovative film and television production technology, which deeply integrates traditional film and television shooting with advanced digital technology. Through real-time rendering, motion capture and other technical means, realistic scenes, characters and special effects are created in the virtual environment, and can be presented in real time on the shooting scene, so that creators can adjust and optimize the shooting content in real time. Greatly improve the flexibility and efficiency of creation.",
    "tags": [],
    "title": "COMP2043 GRP Group 10 Open Educational Resources",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources \u003e  Unreal_engines",
    "content": "3.1 Creating and Saving Your Project If you just launched the Engine, you can easily choose a template to create a new project in the starting panel. If you have already opened a project, hover the cursor above File inside the menu bar and select New Project… in the drop-down list. To save a project, select Save All in the same drop-down list.\n3.2 Basic Operations on an Object By default, when you have your project opened in the Engine, you will see two panels, Outliner and Details panels vertically on the right-hand side. The upper panel, Outliner, shows all objects in the current level. The lower panel, Details, displays many properties after you select an object. To escape from the selection, press the Esc key on your keyboard.\nThere are some useful shortcuts to modify an object or change your view inside that virtual world, but they are different across different OS platforms. You can also edit settings for shortcuts. To see or modify those settings, hover your cursor above Edit in the menu bar, select Editor Preferences, and then click Keyboard Shortcuts under the section General.\n3.3 Utilizing Assets with Content Browser To utilize assets, click Content Drawer in the bottom left corner to open the Content Browser, and simply drag an asset from the Content Browser to the Level Viewport. If you choose to both download Starter Content when installing the engine and select Starter Content when creating your project, you should be able to see the Starter Content folder in the Content Browser, which contains many basic assets. You can also import your own assets using Import depending on the form of your asset files.",
    "description": "3.1 Creating and Saving Your Project If you just launched the Engine, you can easily choose a template to create a new project in the starting panel. If you have already opened a project, hover the cursor above File inside the menu bar and select New Project… in the drop-down list. To save a project, select Save All in the same drop-down list.\n3.2 Basic Operations on an Object By default, when you have your project opened in the Engine, you will see two panels, Outliner and Details panels vertically on the right-hand side. The upper panel, Outliner, shows all objects in the current level. The lower panel, Details, displays many properties after you select an object. To escape from the selection, press the Esc key on your keyboard.",
    "tags": [],
    "title": "Chapter 3: Unreal Engine Fundamental Operations",
    "uri": "/unreal_engine/3.unreal_engine_fundamental_operations/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "COMP2043 GRP Group 10 Open Educational Resources",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
